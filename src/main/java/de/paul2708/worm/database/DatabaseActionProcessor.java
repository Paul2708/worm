package de.paul2708.worm.database;

import de.paul2708.worm.columns.AttributeResolver;
import de.paul2708.worm.columns.PrimaryKeyAttribute;
import de.paul2708.worm.repository.actions.*;

import java.lang.reflect.Field;

public class DatabaseActionProcessor {

    private final Database database;

    public DatabaseActionProcessor(Database database) {
        this.database = database;
    }

    public Object process(DatabaseAction action) {
        if (action instanceof SaveAction) {
            Object targetEntity = action.getMethodInformation().args()[0];
            AttributeResolver resolver = new AttributeResolver(targetEntity);

            PrimaryKeyAttribute primaryKey = resolver.getPrimaryKey();
            Object key;

            if (primaryKey.autoGenerated()) {
                key = KeyGenerator.generate(primaryKey.type());
                setField(primaryKey.fieldName(), targetEntity, key);
            } else {
                key = getField(primaryKey.fieldName(), targetEntity);
            }

            return database.save(key, targetEntity);
        } else if (action instanceof FindAllAction) {
            return database.findAll();
        } else if (action instanceof FindByIdAction) {
            return database.findById(action.getMethodInformation().args()[0]);
        } else if (action instanceof DeleteAction) {
            Object targetEntity = action.getMethodInformation().args()[0];
            AttributeResolver resolver = new AttributeResolver(targetEntity);

            Object key = getField(resolver.getPrimaryKey().fieldName(), targetEntity);

            if (key == null) {
                throw new IllegalArgumentException("Cannot access primary key");
            }

            database.delete(key);

            return null;
        }

        throw new IllegalArgumentException("Did not handle database action %s".formatted(action.getClass().getName()));
    }

    private void setField(String fieldName, Object object, Object value) {
        try {
            Field field = object.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);

            field.set(object, value);
        } catch (IllegalAccessException | NoSuchFieldException e) {
            throw new RuntimeException(e);
        }
    }

    private Object getField(String fieldName, Object object) {
        try {
            Field field = object.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);

            return field.get(object);
        } catch (IllegalAccessException | NoSuchFieldException e) {
            throw new RuntimeException(e);
        }
    }
}
