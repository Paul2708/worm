package de.paul2708.worm.attributes;

import de.paul2708.worm.attributes.properties.*;
import de.paul2708.worm.attributes.util.AttributeNameTransformer;
import de.paul2708.worm.util.Reflections;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class AttributeInformation implements Comparable<AttributeInformation> {

    private final String attributeName;
    private final String fieldName;
    private final Class<?> type;
    private final Class<?> entityClass;

    private final List<AttributeProperty> properties;
    private final Field field;

    public AttributeInformation(String attributeName, String fieldName, Class<?> type, Class<?> entityClass) {
        this.attributeName = attributeName;
        this.fieldName = fieldName;
        this.type = type;
        this.entityClass = entityClass;

        this.properties = new ArrayList<>();
        this.field = Reflections.getField(entityClass, fieldName);
    }

    public void addProperty(AttributeProperty property) {
        properties.add(property);
    }

    public String attributeName() {
        return attributeName;
    }

    public String fieldName() {
        return fieldName;
    }

    public Class<?> type() {
        return type;
    }

    public String getFullAttributeName() {
        return "%s.%s".formatted(new AttributeResolver(entityClass).getEntity(), attributeName);
    }

    public String getTransformedAttributeName() {
        return AttributeNameTransformer.transform(attributeName);
    }

    public Field getField() {
        return field;
    }

    public void setValue(Object targetObject, Object value) {
        try {
            field.set(targetObject, value);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        }
    }

    public Object getValue(Object targetObject) {
        try {
            return field.get(targetObject);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        }
    }

    public <T extends AttributeProperty> boolean hasProperty(Class<T> propertyClass) {
        for (AttributeProperty property : properties) {
            if (property.getClass().equals(propertyClass)) {
                return true;
            }
        }

        return false;
    }

    public <T> T getProperty(Class<T> propertyClass) {
        for (AttributeProperty property : properties) {
            if (property.getClass().equals(propertyClass)) {
                return (T) property;
            }
        }

        return null;
    }

    public boolean hasAnnotation(Class<? extends Annotation> annotationClass) {
        return getField().isAnnotationPresent(annotationClass);
    }

    public boolean hasMaximumLength() {
        return hasProperty(LengthRestrictedProperty.class);
    }

    public boolean isIdentifier() {
        return hasProperty(IdentifierProperty.class);
    }

    public boolean isAutoGenerated() {
        return hasProperty(IdentifierProperty.class) && getProperty(IdentifierProperty.class).hasGenerator();
    }

    public boolean isReference() {
        return hasProperty(ReferenceProperty.class);
    }

    public boolean isCollection() {
        return Reflections.isSet(type) || Reflections.isList(type) || Reflections.isMap(type)
                || type.isArray();
    }

    public boolean isAutoTimestamp() {
        return hasAnnotation(CreatedAt.class) || hasAnnotation(UpdatedAt.class);
    }

    @Override
    public int compareTo(AttributeInformation other) {
        if (hasProperty(IdentifierProperty.class) && other.hasProperty(IdentifierProperty.class)) {
            return attributeName.compareTo(other.attributeName);
        } else if (hasProperty(IdentifierProperty.class)) {
            return -1;
        } else if (other.hasProperty(IdentifierProperty.class)) {
            return 1;
        } else {
            return attributeName.compareTo(other.attributeName);
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AttributeInformation that = (AttributeInformation) o;
        return Objects.equals(attributeName, that.attributeName)
                && Objects.equals(fieldName, that.fieldName)
                && Objects.equals(type, that.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(attributeName, fieldName, type);
    }

    @Override
    public String toString() {
        return "AttributeInformation{" +
                "attributeName='" + attributeName + '\'' +
                ", fieldName='" + fieldName + '\'' +
                ", type=" + type +
                '}';
    }
}