package de.paul2708.worm.columns;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class AttributeResolver {

    public final Class<?> clazz;

    public AttributeResolver(Object object) {
        this.clazz = object.getClass();
    }

    public AttributeResolver(Class<?> clazz) {
        this.clazz = clazz;
    }

    public String getTable() {
        return clazz.getAnnotation(Table.class).value();
    }

    public PrimaryKeyAttribute getPrimaryKey() {
        for (Field field : clazz.getDeclaredFields()) {
            if (field.isAnnotationPresent(PrimaryKey.class)) {
                String column = field.getAnnotation(PrimaryKey.class).value();

                return new PrimaryKeyAttribute(field.getName(), column, field.getType(),
                        field.isAnnotationPresent(AutoGenerated.class));
            }
        }

        return null;
    }

    public List<ColumnAttribute> getColumns() {
        List<ColumnAttribute> columns = new ArrayList<>();

        columns.add(this.getPrimaryKey());

        for (Field field : clazz.getDeclaredFields()) {
            if (field.isAnnotationPresent(Column.class) && !field.isAnnotationPresent(PrimaryKey.class)) {
                String column = field.getAnnotation(Column.class).value();

                ColumnAttribute columnAttribute;
                if (field.getType().equals(String.class)) {
                    int maxLength = field.isAnnotationPresent(MaxLength.class) ? field.getAnnotation(MaxLength.class).value() : -1;
                    columnAttribute = new StringColumnAttribute(column, field.getName(), maxLength);
                } else {
                    columnAttribute = new ColumnAttribute(column, field.getName(), field.getType());
                }

                columns.add(columnAttribute);
            }
        }

        return columns;
    }

    public Object getValueByColumn(Object object, String column) {
        for (Field field : clazz.getDeclaredFields()) {
            if (field.isAnnotationPresent(PrimaryKey.class)) {
                if (field.getAnnotation(PrimaryKey.class).value().equals(column)) {
                    try {
                        field.setAccessible(true);
                        return field.get(object);
                    } catch (IllegalAccessException e) {
                        throw new RuntimeException(e);
                    }
                }
            }
            if (field.isAnnotationPresent(Column.class)) {
                if (field.getAnnotation(Column.class).value().equals(column)) {
                    try {
                        field.setAccessible(true);
                        return field.get(object);
                    } catch (IllegalAccessException e) {
                        throw new RuntimeException(e);
                    }
                }
            }
        }

        return null;
    }

    public Object createInstance(Map<String, Object> fieldValues) {
        try {
            Object object = clazz.getConstructor().newInstance();

            for (Map.Entry<String, Object> entry : fieldValues.entrySet()) {
                Field field = clazz.getDeclaredField(entry.getKey());
                field.setAccessible(true);

                field.set(object, entry.getValue());
            }

            return object;
        } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException |
                 NoSuchFieldException e) {
            throw new RuntimeException(e);
        }
    }
}
