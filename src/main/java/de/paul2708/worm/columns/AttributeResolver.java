package de.paul2708.worm.columns;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

public class AttributeResolver {

    public final Class<?> clazz;

    public AttributeResolver(Object object) {
        this.clazz = object.getClass();
    }

    public AttributeResolver(Class<?> clazz) {
        this.clazz = clazz;
    }

    public String getTable() {
        return clazz.getAnnotation(Table.class).value();
    }

    public PrimaryKeyAttribute getPrimaryKey() {
        for (Field field : clazz.getDeclaredFields()) {
            if (field.isAnnotationPresent(PrimaryKey.class)) {
                String column = field.getAnnotation(PrimaryKey.class).value();

                return new PrimaryKeyAttribute(field.getName(), column, field.getType(),
                        field.isAnnotationPresent(AutoGenerated.class));
            }
        }

        return null;
    }

    public List<ColumnAttribute> getColumnsWithoutPrimaryKey() {
        List<ColumnAttribute> columns = new ArrayList<>();

        for (Field field : clazz.getDeclaredFields()) {
            if (field.isAnnotationPresent(Column.class) && !field.isAnnotationPresent(PrimaryKey.class)) {
                String column = field.getAnnotation(Column.class).value();

                if (field.getType().equals(String.class)) {
                    int maxLength = field.isAnnotationPresent(MaxLength.class) ? field.getAnnotation(MaxLength.class).value() : -1;
                    columns.add(new StringColumnAttribute(column, maxLength));
                } else {
                    columns.add(new ColumnAttribute(column, field.getType()));
                }
            }
        }

        return columns;
    }
}
